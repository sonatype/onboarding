/**
 * Copyright (c) 2008-2010 Sonatype, Inc.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Sonatype, Inc. - initial API and implementation
 */
package com.sonatype.nexus.onboarding.its.nxcm1985;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.URL;

import org.apache.maven.wagon.authorization.AuthorizationException;
import org.codehaus.plexus.util.FileUtils;
import org.sonatype.nexus.integrationtests.TestContainer;
import org.testng.Assert;
import org.testng.annotations.Test;

import com.sonatype.nexus.onboarding.its.AbstractOnboardingPrivilegeIT;
import com.sonatype.nexus.onboarding.project.repository.OnboardingProjectRepository;
import com.sonatype.s2.project.model.IS2Project;

public class NXCM1985OnboardingContentClassCheckIT
    extends AbstractOnboardingPrivilegeIT
{
    @Test
    public void validateContentClass()
        throws Exception
    {
        String descriptorFilename = IS2Project.PROJECT_DESCRIPTOR_FILENAME;
        File testProjectDescriptor = this.getTestFile( "project.xml" );
        String deployURI = getNexusTestRepoUrl( IS2Project.PROJECT_REPOSITORY_ID ) + "/group/id/1.2.3";
        
        //switch to test user and make sure nothing works
        useTestForRequests();
        deploy( true, deployURI, testProjectDescriptor, descriptorFilename );
        get( true, deployURI, OnboardingProjectRepository.INSTALL_JNLP_FILENAME );
        
        //now give the user proper deploy privs and make sure works
        TestContainer.getInstance().getTestContext().useAdminForRequests();
        resetTestUserPrivs();
        //note use of m2 privs here, not onboarding, as onboarding is compatible with m2
        giveUserPrivilege( TEST_USER_NAME, "T5" );
        giveUserPrivilege( TEST_USER_NAME, "T3" );
        useTestForRequests();
        
        deploy( false, deployURI, testProjectDescriptor, descriptorFilename );
        get( false, deployURI, OnboardingProjectRepository.INSTALL_JNLP_FILENAME );
    }
    
    private void deploy( boolean shouldFail, String deployURI, File testProjectDescriptor, String descriptorFilename ) 
        throws Exception
    {
        try
        {
            getDeployUtils().deployWithWagon( "http", deployURI, testProjectDescriptor, descriptorFilename );
            
            if ( shouldFail )
            {
                Assert.fail( "Deploy should have failed!" );
            }
        }
        catch ( AuthorizationException e )
        {
            if ( !shouldFail )
            {
                Assert.fail( "Deploy should have passed!" );
            }
        }
    }
    
    private void get( boolean shouldFail, String deployURI, String jnlpFilename ) 
        throws Exception
    {
        try
        {
            String localStorageDir = nexusWorkDir + "/storage/mse-installer-repo";
            FileUtils.copyFile( getTestFile( "artifacts.xml" ), new File( localStorageDir, "artifacts.xml" ) );
            FileUtils.copyFile( getTestFile( "com.sonatype.s2.installer.jnlp_1.0.4.201007010531.jnlp" ),
                                new File( localStorageDir,
                                          "mse_installer/com.sonatype.s2.installer.jnlp_1.0.4.201007010531.jnlp" ) );

            File resultProjectXml = this.downloadFile( new URL( deployURI + "/" + jnlpFilename ), "target/NXCM1985OnboardingContentClassCheckIT/" + OnboardingProjectRepository.INSTALL_JNLP_FILENAME );
            
            if ( shouldFail )
            {
                Assert.fail( "Get should have failed!" );   
            }
            else
            {
                Assert.assertTrue( FileUtils.fileRead( resultProjectXml ).contains( "Generated by nexus-onboarding-plugin" ) );
            }
        }
        catch ( FileNotFoundException e )
        {
            if ( !shouldFail )
            {
                throw e;
            }
        }
    }
    
    private void useTestForRequests()
    {
        TestContainer.getInstance().getTestContext().setUsername( TEST_USER_NAME );
        TestContainer.getInstance().getTestContext().setPassword( TEST_USER_PASSWORD );
    }
}
